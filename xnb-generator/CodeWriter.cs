using System;
using System.IO;

class CodeWriter
{
	enum Language
	{
		CSharp, C,
	}

	private StreamWriter w;

	public CodeWriter (string fname)
	{
		Init (fname);
	}

	Language lang;

	Language LanguageForExtension (string ext)
	{
		switch (ext) {
			case ".h":
				case ".c":
				return Language.C;
			case ".cs":
			default:
				return Language.CSharp;
		}
	}

	void Init (string fname)
	{
		if (File.Exists (fname)) {
			File.Delete (fname);
		}

		lang = LanguageForExtension (Path.GetExtension (fname));

		switch (lang) {
			case Language.C:
				Indenter = "  ";
				break;

			case Language.CSharp:
			default:
				Indenter = "\t";
				break;
		}

		FileStream fs = new FileStream (fname, FileMode.OpenOrCreate, FileAccess.Write);
		w = new StreamWriter (fs);

		if (lang == Language.CSharp) {
			w.WriteLine ("//------------------------------------------------------------------------------");
			w.WriteLine ("// <auto-generated>");
			w.WriteLine ("//     This code was generated by a tool.");
			w.WriteLine ("// </auto-generated>");
			w.WriteLine ("//------------------------------------------------------------------------------");
			w.WriteLine ();
		} else {
			WriteComment ("This code was generated by a tool.");
		}

	}

	public string Indenter = "\t";
	string cur_indent = "";
	int level = 0;

	public void Indent ()
	{
		level++;
		cur_indent = "";
		for (int i = 0; i != level ; i++) cur_indent += Indenter;
	}

	public void Unindent ()
	{
		level--;
		cur_indent = "";
		for (int i = 0; i != level ; i++) cur_indent += Indenter;
	}

	public void Write (string text)
	{
		w.Write (text);
	}

	public void WriteLine (string text)
	{
		WriteLine (text, true);
	}

	public void WriteLine (string text, bool autoindent)
	{
		char[] opentags = {'{', '('};
		char[] closetags = {'}', ')'};

		if (autoindent && text.TrimStart (closetags) != text)
			Unindent ();

		if (!text.StartsWith ("#"))
			w.Write (cur_indent);

		w.WriteLine (text);

		if (autoindent && text.TrimEnd (opentags) != text)
			Indent ();
	}

	public void WriteLine (string text, params CodeWriter[] ccs)
	{
		foreach (CodeWriter cc in ccs)
			WriteLine (text, "", cc, "");
	}

	public void WriteLine (string text, CodeWriter cc, string suffix)
	{
		WriteLine (text, "", cc, suffix);
	}

	public void WriteLine (string text, string prefix, CodeWriter cc)
	{
		WriteLine (text, prefix, cc, "");
	}

	public void WriteLine (string text, string prefix, CodeWriter cc, string suffix)
	{
		WriteLine (text);
		cc.WriteLine (prefix + text + suffix);
	}

	public void WriteComment (string text)
	{
		w.WriteLine ("/* " + text + " */");
	}

	public void WriteLine ()
	{
		w.WriteLine ("");
	}

	public void Close ()
	{
		w.Flush ();
		w.Close ();
	}
}

