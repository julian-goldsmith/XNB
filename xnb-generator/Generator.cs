using System;
using System.Collections.Generic;
using System.IO;
using System.Xml.Serialization;

using Schemas;
using xnbgenerator.Generators;

public class Generator
{   
	public static void Generate(string fname, string name)
	{
		StreamReader sr = new StreamReader(fname);
		XmlSerializer sz = new XmlSerializer(typeof(xcb));
		xcb xcb = (xcb)sz.Deserialize(sr);

		string extName = xcb.extensionxname ?? "";

		TypesGenerator tg = new TypesGenerator();
		tg.Generate(xcb, name, extName);

		InterfaceGenerator ig = new InterfaceGenerator();
		ig.Generate(xcb, name);

		ClassGenerator cg = new ClassGenerator();
		cg.Generate(xcb, name, extName);
	}

	public static int SizeOfType (string t)
	{
		switch (t) {
			case "sbyte":
				case "byte":
				case "bool":
				return 1;
			case "short":
				case "ushort":
				case "char":
				case "uchar":
				return 2;
			case "int":
				case "uint":
				return 4;
			case "long":
				case "ulong":
				return 8;
		}

		//FIXME: these are hacks, add SizeMap stanza to TypeMap
		if (t.EndsWith ("Id"))
			return 4;

		if (idMap.ContainsKey (t))
			return SizeOfType (idMap[t]);

		Console.Error.WriteLine ("Error: Size not known for type: " + t);
		return 0;
	}

	public static string TypeToCs (string name)
	{
		if (typeMap.ContainsKey (name))
			return typeMap[name];

		Console.Error.WriteLine ("Warning: typeMap doesn't contain " + name);
		return GeneratorUtil.ToCs (name);
	}

	public static string NewTypeToCs (string name)
	{
		return NewTypeToCs (name, "");
	}

	public static string NewTypeToCs (string name, string suffix)
	{
		//TODO: error reporting?      
		if (typeMap.ContainsKey (name))
		{
			string cs = typeMap[name];

			if (cs.ToLower () == name.ToLower ())
			{
				caseMap[name.ToLower ()] = cs;            
                return cs;
			}
			else
			{
				// this type is already defined as a primitive
				return NewTypeToCs (name + "_fake");
			}
		}
		else
		{
			string cs = GeneratorUtil.ToCs (name) + suffix;
			typeMap[name] = cs;

            return cs;
		}
	}

	public static Dictionary<string,string> idMap = new Dictionary<string,string> ();
	static Dictionary<string,string> typeMap = new Dictionary<string,string> ();

	//TODO: use caseMap for field case corrections?
	static Dictionary<string,string> caseMap = new Dictionary<string,string> ();

	public static void LoadTypeMap (string fname)
	{
		char[] delim = {'\t'};

		StreamReader sr = new StreamReader (new FileStream (fname, FileMode.Open, FileAccess.Read));

		string ln;
		while ((ln = sr.ReadLine ()) != null)
		{
			ln = ln.Trim ();

			if (ln == "")
				continue;

			if (ln.StartsWith ("#"))
			{
                continue;
			}

			string[] parts = ln.Split (delim);
			if (parts.Length != 2)
			{
				Console.Error.WriteLine ("Error: Bad type map file: " + fname);
				continue;
			}

			string key = parts[0].Trim ();
			string value = parts[1].Trim ();

			typeMap[key] = value;
		}

		sr.Close ();
	}

	public static void SaveTypeMap (string fname)
	{
		StreamWriter sw = new StreamWriter (new FileStream (fname, FileMode.Create, FileAccess.Write));
		sw.WriteLine ("#TypeMap for " + "[]");
		sw.WriteLine ("#Generated by xnb-generator");
		sw.WriteLine ();

		foreach (KeyValuePair<string,string> entry in typeMap)
			sw.WriteLine (entry.Key + "\t" + entry.Value);

		sw.Close ();
	}
}
